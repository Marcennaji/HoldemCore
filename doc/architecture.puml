@startuml
title HoldemCore – Hexagonal Architecture with Constructor Dependency Injection

skinparam packageStyle rectangle
skinparam shadowing false
skinparam componentStyle rectangle

package "Core (Domain)" as Core {
  [Engine] as Engine
  [GameEvents] as GameEvents
  [Session] as Session
  [EngineFactory] as EngineFactory
  [Player/Strategy] as PlayerStrategy
  [PlayerFactory] as PlayerFactory
  [Hand] as Hand
  [Interfaces/Ports] as Ports
}

package "Application (Composition Root)" as App {
  [main_qt_widgets.cpp] as Main
  [GuiAppController] as GuiController
}

package "Infrastructure (Adapters)" as Infra {
  [ConsoleLogger] as ConsoleLogger
  [SqlitePlayersStatisticsStore] as SqliteStore
  [PsimHandEvaluationEngine] as PsimEngine
  [DefaultRandomizer] as DefaultRandomizer
  [SqliteDb] as SqliteDb
}

package "UI (Adapters)" as UI {
  [StartWindow] as StartWindow
  [PokerTableWindow] as TableWindow
  [GuiBridgeWidgets] as Bridge
}

package "Third-party" as ThirdParty {
  [SQLite3] as SQLite3
  [psim] as psim
  [Qt6] as Qt6
  [GoogleTest] as GoogleTest
}

' Core Domain Relationships
Ports -[#0000FF]-> Engine : defines contracts
GameEvents -[#0000FF]-> Session : event system
Session -[#green]-> EngineFactory : uses
Session -[#green]-> PlayerFactory : creates
EngineFactory -[#green]-> Hand : creates
EngineFactory -[#green]-> Engine : creates
PlayerFactory -[#green]-> PlayerStrategy : creates
Engine -[#green]-> Ports : depends on
Hand -[#green]-> Ports : depends on
PlayerStrategy -[#green]-> Ports : depends on
Session -[#green]-> Ports : depends on
EngineFactory -[#green]-> Ports : depends on
PlayerFactory -[#green]-> Ports : depends on

' Application Layer (Composition Root & Direct DI)
Main -[#red]-> Infra : creates concrete adapters
Main -[#red]-> GuiController : injects adapters
GuiController -[#red]-> Session : creates with injected deps
GuiController -[#red]-> EngineFactory : creates with injected deps
GuiController -[#red]-> UI : creates

' Infrastructure Adapters (implement core interfaces)
ConsoleLogger -[#orange]-> Ports : implements Logger
SqliteStore -[#orange]-> Ports : implements PlayersStatisticsStore  
PsimEngine -[#orange]-> Ports : implements HandEvaluationEngine
DefaultRandomizer -[#orange]-> Ports : implements Randomizer
SqliteStore -[#orange]-> SqliteDb : uses

' UI Adapters
UI -[#orange]-> GameEvents : subscribes to
StartWindow -[#orange]-> Session : triggers game start
Bridge -[#orange]-> GameEvents : handles events
Bridge -[#orange]-> TableWindow : updates UI

' Third-party Dependencies
SqliteDb -[#gray]-> SQLite3 : uses
PsimEngine -[#gray]-> psim : uses  
UI -[#gray]-> Qt6 : framework

' Constructor Dependency Injection Flow
note right of Main : Composition Root:\n• Creates concrete adapters\n• Injects via constructors\n• No service containers\n• Pure dependency injection
note bottom of Ports : Abstract Interfaces:\n• Logger\n• HandEvaluationEngine\n• PlayersStatisticsStore\n• Randomizer
note bottom of Core : Pure Domain Logic:\n• Zero infrastructure knowledge\n• All dependencies injected\n• Constructor injection only\n• ISP compliant

@enduml
